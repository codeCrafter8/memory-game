@{
    ViewData["Title"] = "Gra Memory";
   }

<link href="css/memory.css" rel="stylesheet" />


<div class="container">
    <h2 style="text-align: center; text-transform: uppercase; letter-spacing: 1px">Sieciowa gra Memory</h2>
    <div id="playerSetup" style="display: block; margin-top: 2rem">
        <label style="letter-spacing: 1px" for="playerName">Wpisz swój nick: </label>
        <input type="text" id="playerName"  style="border-radius: 1rem; padding: .5rem 1rem; letter-spacing: 1px;"/>
        <section id="imageUpload" style="margin-top: 2rem; display: block;">
          
            <span>Wgraj obrazki dla kart (min. 2)</span>

            <label for="imageFiles" class="upload-file">
                Wgraj karty
            </label>
            <input id="imageFiles" type="file" multiple accept="image/*" />


        </section>


        <section style="margin-top: 2rem; display: flex; gap: 1rem">
            <button id="startButton" style="border-radius: 1rem; padding: 0.5rem 1rem;" class="btn btn-primary mt-3">Rozpocznij grę z własnymi obrazkami</button>
            <button id="joinButton" style="border-radius: 1rem;  padding: 0.5rem 1rem;" class="btn btn-secondary mt-3">Dołącz do istniejącej gry</button>
        </section>

    </div>

    <div id="waitingMessage" style="display: none; margin-top: 2rem">
        <div id="hostControls" style="margin-top: 1rem; display: none;">
            <button id="startGameManually" style="border-radius: 1rem; padding: 0.5rem 1rem;" class="btn btn-success">Rozpocznij rozgrywkę</button>
        </div>
        <div id="waitingForHost" style="margin-top: 1rem; display: none;">
            <span style="letter-spacing: 1px;">Oczekiwanie na rozpoczęcie gry przez hosta...</span>
        </div>
    </div>

    <div id="gameInfo" style="display: none;">

        <div id="players" style="margin-bottom: 1.5rem;">
            <!-- Dynamiczne generowanie graczy - będzie wypełnione przez JavaScript -->
        </div>

        @* <div id="players">
            <div style="border: 1px solid blue" class="player player-1">
                <div class="player-label">Gracz 1</div>
                <div style="display: flex; gap: 1rem; justify-content: space-between; font-size: 2.5rem; font-weight: 600">
                <div class="player-name"></div>
                <div style="color: blue" class="player-score"></div>
                </div>
            </div>
            <div style="border: 1px solid orange" class="player player-2">
                <div class="player-label">Gracz 2</div>
                <div style="display: flex; gap: 1rem; justify-content: space-between; font-size: 2.5rem; font-weight: 600">


                    <div style="color: orange" class="player-score"></div>
                <div class="player-name"></div>
                </div>
            </div>
        </div> *@

        <div id="turnInfo"></div>

            <div id="gameBoard" class="game-board"></div>

        <div id="moves">Liczba ruchów: 0</div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/memoryHub", { transport: signalR.HttpTransportType.WebSockets })
            .configureLogging(signalR.LogLevel.Information)
            .build();

        let game = null;
        let myConnectionId = null;
        let isHost = false;

        connection.start()
            .then(() => {
                console.log("SignalR connected!");
                myConnectionId = connection.connectionId;
            })
            .catch(err => console.error("SignalR connection error:", err));

        document.getElementById("startButton").addEventListener("click", async () => {
            const playerName = document.getElementById("playerName").value;
            const imageFiles = document.getElementById("imageFiles").files;

            if (!playerName) {
                alert("Wpisz swój nick.");
                return;
            }

            if (imageFiles.length < 2) {
                alert("Załącz co najmniej 2 obrazki.");
                return;
            }

            const formData = new FormData();
            for (let i = 0; i < imageFiles.length; i++) {
                formData.append("images", imageFiles[i]);
            }

            const response = await fetch("/Memory/UploadImages", {
                method: "POST",
                body: formData
            });
            const result = await response.json();

            if (result.success) {
                connection.invoke("StartGameWithImages", playerName, result.imagePaths);
                isHost = true;
            } else {
                alert(result.message);
            }
        });

        document.getElementById("joinButton").addEventListener("click", () => {
            const playerName = document.getElementById("playerName").value;
            if (playerName) {
                document.getElementById("imageUpload").style.display = "none";
                connection.invoke("JoinGame", playerName);
                isHost = false;
            } else {
                alert("Wpisz swój nick.");
            }
        });

        document.getElementById("startGameManually").addEventListener("click", () => {
            if (game && isHost) {
                connection.invoke("StartGameManually", game.gameId);
            }
        });

        connection.on("NoGameAvailable", (message) => {
            alert(message);
            window.location.reload();
        });

        connection.on("WaitingForOpponent", (gameData) => {
            game = gameData;
            document.getElementById("playerSetup").style.display = "none";
            document.getElementById("waitingMessage").style.display = "block";

            if (isHost) {
                document.getElementById("hostControls").style.display = "block";
            } else {
                document.getElementById("waitingForHost").style.display = "block";
            }
        });

        connection.on("GameStarted", (gameData) => {
            game = gameData;
            document.getElementById("playerSetup").style.display = "none";
            document.getElementById("waitingMessage").style.display = "none";
            document.getElementById("gameInfo").style.display = "block";
            renderGame();
        });

        connection.on("CardFlipped", (gameData) => {
            game = gameData;
            renderGame();
        });

        connection.on("NotYourTurn", () => {
            alert("Nie twoja kolej!");
                
        });

        connection.on("GameOver", (gameData) => {
            game = gameData;
            renderGame();
            const winner = game.players.reduce((prev, current) => (prev.score > current.score) ? prev : current);
            alert(`Koniec gry! Zwycięzca: ${winner.name}, punkty: ${winner.score}.`);
        });

        connection.on("PlayerDisconnected", (playerName) => {
            alert(`${playerName} rozłączył się. Koniec gry.`);
            window.location.reload();
        });

        function renderGame() {
            const gameBoard = document.getElementById("gameBoard");
            gameBoard.innerHTML = "";
            document.getElementById("moves").textContent = `Ruchy: ${game.moves}`;

            const playersDiv = document.getElementById("players");
            playersDiv.innerHTML = ""; 

            const colors = ["blue", "orange", "green", "purple", "red"];

            game.players.forEach((player, index) => {
                const playerElement = document.createElement("div");
                playerElement.className = "player";
                playerElement.style.border = `1px solid ${colors[index % colors.length]}`;
                playerElement.style.padding = "0.5rem 1rem";
                playerElement.style.margin = "0.5rem 0";

                playerElement.innerHTML = `
                    <div class="player-label">Gracz ${index + 1}</div>
                    <div style="display: flex; justify-content: space-between; font-size: 1.5rem; font-weight: 600">
                        <div class="player-name">${player.name}</div>
                        <div style="color: ${colors[index % colors.length]}" class="player-score">${player.score}</div>
                    </div>
                `;

                playersDiv.appendChild(playerElement);
            });

            const currentPlayer = game.players.find(p => p.connectionId === game.currentPlayerId);
            const turnInfo = document.getElementById("turnInfo");
            turnInfo.textContent = `Obecny ruch: ${currentPlayer.name}`;

            game.cards.forEach(card => {
                const cardElement = document.createElement("div");
                cardElement.className = "card" + (card.isMatched ? "matched" : "");
                if (card.isFlipped || card.isMatched) {
                    const img = document.createElement("img");
                    img.src = card.imagePath;
                    img.style.width = "100%";
                    img.style.height = "100%";
                    cardElement.appendChild(img);
                } else {
                    cardElement.innerHTML = "?";
                }
                cardElement.onclick = () => {
                    if (!card.isFlipped && !card.isMatched) {
                        connection.invoke("FlipCard", game.gameId, card.id);
                    }
                };
                gameBoard.appendChild(cardElement);
            });
        }
    </script>
}

