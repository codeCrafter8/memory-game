@{
    ViewData["Title"] = "Gra Memory";
}

<link href="css/memory.css" rel="stylesheet" />

    <div id="playerSetup" class="setup-container">

        <fieldset>
            <legend>
                Dane gracza
            </legend>
            <div style="display: flex; flex-wrap: wrap; align-items: center; justify-content: center;">
                <label for="playerName" style="font-size: 18px; margin-right: 20px">Podaj swój nick</label>
                <input style="padding: 10px 20px; border: none; outline: none; border: 1px solid black;" type="text" id="playerName" placeholder="Nick" />
            </div>
        </fieldset>

        <div style="padding: 1rem">
            <button id="joinButton" class="joinButton">Dołącz szybko do istniejącej gry</button>
        </div>

        <div>
            <hr />
            <p style="font-size: 24px; font-weight: 500; text-transform: uppercase; letter-spacing:1px">Lub</p>
            <hr />
            <h2>Rozpocznij nową grę jako host</h2>
        </div>

        <fieldset style="margin-top: 20px">
            <legend>Ustawienia nowej gry</legend>
                <p style="font-size: 18px">Wybierz poziom trudności</p>

                <div style="display: flex; gap: 1rem; justify-content: center;">
                    <input type="radio" name="difficulty" id="easy" value="easy" checked />
                    <label style="font-size: 18px" for="easy">EASY</label>

                    <input type="radio" name="difficulty" id="medium" value="medium" checked />
                    <label style="font-size: 18px" for="medium">MEDIUM</label>


                    <input type="radio" name="difficulty" id="hard" value="hard" checked />
                    <label style="font-size: 18px" for="hard">HARD</label>
                </div>
            <label for="timeForTurn" style="margin: 20px 10px 0 0; font-size: 18px">Wybierz czas na ruch</label>
            <input type="number" id="timeForTurn" value=30 />
        </fieldset>


        <fieldset style="margin-top: 20px; margin-bottom: 20px;">
            <legend>Zestawy</legend>
            <div id="cardSetSelection" style="display: block; margin: 30px 0">
                <h4>Wybierz przesłany zestaw kart</h4>
                <div id="cardSetsList"></div>
                <hr />
                <p style="font-size: 24px; font-weight: 500; text-transform: uppercase; letter-spacing:1px">Lub</p>
                <hr />
                <button id="createNewSetButton" class="createNewSetButton" style="margin-bottom: 70px">Utwórz nowy zestaw z kartami</button>
            </div>
        </fieldset>

        <div id="newSetForm" style="display: none;">
            <h4>Utwórz nowy zestaw kart</h4>
            <div style="display: flex; justify-content: center; padding: 20px 0; align-items: center; gap: 10px; flex-wrap: wrap;">
            <label for="setName">Ustaw nazwę zestawu kart:</label>
            <input type="text" id="setName" placeholder="Podaj nazwę zestawu" style="padding: 10px 20px; border: none; outline: none; border: 1px solid black;" />
            </div>

            <label style="padding: 10px 20px; background: violet; cursor: pointer; margin: 10px 0" for="imageFiles">Wybierz obrazy (PNG, JPG)</label>
            <input type="file"
                   id="imageFiles"
                   name="imageFiles"
                   style="border: none;"
                   accept=".jpg, .jpeg, .png"
                   multiple />
            <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap; margin-bottom: 30px;">
                <button id="uploadSetButton" class="btn btn-primary mt-3" style="display: block;">Prześlij i zapisz zestaw</button>
                <button id="cancelNewSetButton" class="btn btn-secondary mt-3">Anuluj</button>
            </div>

        </div>

        <div id="cardSelection" style="display: none; margin-bottom: 30px;">
            <h4>Wybierz karty z zestawu</h4>
            <div id="suggestedCards"></div>
            <div id="cardsPreview" style="display: flex; flex-wrap: wrap; gap: 10px; justify-content: center;"></div>
            <div class="actions">
                <button id="selectAllCards" class="button select-all"> Zaznacz wszystkie karty</button>
                <button id="startWithSelectedCardsButton" class="button start"> Rozpocznij grę</button>
                <button id="backToSetsButton" class="button back"> Cofnij</button>
            </div>
        </div>       
    </div>

    <div id="waitingMessage" style="display: none; margin-top: 1rem">
        <div id="hostControls" style="margin-top: 1rem; display: none;">
            <div id="playerList"></div>
        <button id="startGameManuallyButton" style="border-radius: 1rem; padding: 0.5rem 1rem; margin-top: 10px; background: linear-gradient(135deg, #c3e6cb, #28a745);">Rozpocznij rozgrywkę</button>
        </div>
        <div id="waitingForHost" style="margin-top: 1rem; display: none;">
            <span style="letter-spacing: 1px;">Oczekiwanie na rozpoczęcie gry przez hosta...</span>
        </div>
    </div>

    <div id="gameInfo" style="display: none;">

        <div id="players" style="margin-bottom: 1.5rem;">
        </div>

        <div id="turnInfo" class="turnInfo"></div>
        <div id="turnTimer" style="font-size: 1.25rem; font-weight: bold; color: #d9534f; margin-bottom: 1rem;"></div>
        <div id="turnTimerProgress" style="width: 100%; height: 10px; background: #ddd; margin-bottom: 1rem;">
            <div id="progressBar" style="width: 100%; height: 100%; background: #d9534f; transition: width 1s linear;"></div>
        </div>
        <button id="skipTurnButton" style="border-radius: 1rem; padding: 0.5rem 1rem;" class="btn btn-warning mt-3">
            Pomiń turę
        </button>

        <div id="gameBoard" class="game-board" style="border: 1px solid orange; width: 1000px;"></div>

        <div id="moves" style="margin-bottom: 30px;">Liczba ruchów: 0</div>
    </div>

<div id="modalOverlay" class="modal-overlay hidden">
    <div class="modal-window">
        <p id="modalMessage"></p>
        <button id="modalClose" class="btn btn-primary">OK</button>
    </div>
    </div>



@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/memoryHub", { transport: signalR.HttpTransportType.WebSockets })
            .configureLogging(signalR.LogLevel.Information)
            .build();

        let game = null;
        let myConnectionId = null;
        let selectedSet = null;
        let selectedCards = [];
        let isHost = false;
        let turnTimeout = null;
        let turnInterval = null;

        connection.start()
            .then(() => {
                console.log("SignalR Connected!");
                myConnectionId = connection.connectionId;
                loadCardSets();
            })
            .catch(err => console.error("SignalR Connection Error:", err));

        async function loadCardSets() {
            const response = await fetch("/Memory/GetCardSets");
            const cardSets = await response.json();
            const cardSetsList = document.getElementById("cardSetsList");
            cardSetsList.innerHTML = "";

            cardSets.forEach(set => {
                const setElement = document.createElement("div");
                setElement.className = "card-set";
                const firstImage = set.imagePaths.length > 0 ? set.imagePaths[0] : "/images/placeholder.png";
                setElement.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <img src="${firstImage}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px;" />
                        <h5 style="margin: 0;">${set.name}</h5>
                    </div>
                    <button class="button">Wybierz zestaw</button>
                `;
                setElement.querySelector("button").addEventListener("click", () => {
                    selectedSet = set;
                    showCardSelection(set);
                });
                cardSetsList.appendChild(setElement);
            });
        }

        function showCardSelection(set) {
            const btnSelectAllCards = document.getElementById("selectAllCards");
            document.getElementById("cardSetSelection").style.display = "none";
            document.getElementById("cardSelection").style.display = "block";
            const cardsPreview = document.getElementById("cardsPreview");
            cardsPreview.innerHTML = "";
            selectedCards = [];


           set.imagePaths.forEach((imagePath, index) => {
          const cardElement = document.createElement("div");
          cardElement.className = "card-preview";

          cardElement.dataset.index = index;

          cardElement.innerHTML = `
            <img src="${imagePath}" class="card-previev" />
          `;

          cardElement.addEventListener("click", () => {

            const already = selectedCards.includes(imagePath);

            if (!already) {

              selectedCards.push(imagePath);
              cardElement.classList.add("selected");
            } else {
              selectedCards = selectedCards.filter(path => path !== imagePath);
              cardElement.classList.remove("selected");
            }

            console.log("Wybrane ścieżki:", selectedCards);
          });

          cardsPreview.appendChild(cardElement);
        });

                btnSelectAllCards.addEventListener("click", () => {
 
          selectedCards = [...set.imagePaths];

          cardsPreview
            .querySelectorAll(".card-preview")
            .forEach(cardEl => {
              cardEl.classList.add("selected");
            });

          console.log("Wybrane ścieżki po selectAll:", selectedCards);
        });

        }

        document.getElementById("createNewSetButton").addEventListener("click", () => {
            document.getElementById("cardSetSelection").style.display = "none";
            document.getElementById("newSetForm").style.display = "block";
        });

        document.getElementById("cancelNewSetButton").addEventListener("click", () => {
            document.getElementById("newSetForm").style.display = "none";
            document.getElementById("cardSetSelection").style.display = "block";
        });

        document.getElementById("uploadSetButton").addEventListener("click", async () => {
            const playerName = document.getElementById("playerName").value;
            const setName = document.getElementById("setName").value;
            const imageFiles = document.getElementById("imageFiles").files;

            if (!playerName) {
                 showModal("Wpisz swój nick.");
                return;
            }

            if (!setName) {
                showModal("Wpisz nazwę zestawu.");
                return;
            }

            if (imageFiles.length < 2) {
                 showModal("Dodaj przynajmniej 2 obrazki.");
                return;
            }

            const formData = new FormData();
            for (let i = 0; i < imageFiles.length; i++) {
                formData.append("images", imageFiles[i]);
            }
            formData.append("setName", setName);

            const response = await fetch("/Memory/UploadImages", {
                method: "POST",
                body: formData
            });
            const result = await response.json();

            if (result.success) {
                selectedSet = { id: result.setId, imagePaths: result.imagePaths };
                selectedCards = result.imagePaths;
                document.getElementById("newSetForm").style.display = "none";
                document.getElementById("cardSelection").style.display = "block";
                showCardSelection(selectedSet);
            } else {
                showModal(resultmessage);
            }
        });

        document.getElementById("startWithSelectedCardsButton").addEventListener("click", () => {
            const playerName = document.getElementById("playerName").value;
            const timeForTurn = parseInt(document.getElementById("timeForTurn").value);
            if (selectedCards.length < 2) {
                showModal("Wybierz co najmniej dwie karty, aby rozpocząć grę.");
                return;
            }
            if (isNaN(timeForTurn) || timeForTurn < 5 || timeForTurn > 120) {
                showModal("Wybierz co najmniej dwie karty, aby rozpocząć grę.");
                return;
            }
            connection.invoke("StartGameWithImages", playerName, selectedCards, timeForTurn);
            isHost = true;
        });

        document.getElementById("joinButton").addEventListener("click", () => {
            const playerName = document.getElementById("playerName").value;
            if (playerName) {
                document.getElementById("cardSetSelection").style.display = "none";
                document.getElementById("cardSelection").style.display = "none";
                connection.invoke("JoinGame", playerName);
                isHost = false;
            } else {
                showModal("Wpisz swój nick.");
            }
        });

        document.getElementById("startGameManuallyButton").addEventListener("click", () => {
            if (game && isHost) {
                connection.invoke("StartGameManually", game.gameId);
            }
        });

        document.getElementById("skipTurnButton").addEventListener("click", () => {
            if (game && game.currentPlayerId === myConnectionId) {
                connection.invoke("SkipTurn", game.gameId, myConnectionId);
            } else {
                showModal("Nie Twoja kolej!");
            }
        });

        connection.on("NoGameAvailable", (message) => {
            showModal(message);
            window.location.reload();
        });

        function resetInterface() {
            const playerSetup = document.getElementById("playerSetup");
            const waitingMessage = document.getElementById("waitingMessage");
            const gameInfo = document.getElementById("gameInfo");
            const cardSetSelection = document.getElementById("cardSetSelection");
            const newSetForm = document.getElementById("newSetForm");
            const cardSelection = document.getElementById("cardSelection");

            if (playerSetup) playerSetup.style.display = "block";
            if (waitingMessage) waitingMessage.style.display = "none";
            if (gameInfo) gameInfo.style.display = "none";
            if (cardSetSelection) cardSetSelection.style.display = "block";
            if (newSetForm) newSetForm.style.display = "none";
            if (cardSelection) cardSelection.style.display = "none";

            const cardsPreview = document.getElementById("cardsPreview");
            if (cardsPreview) cardsPreview.innerHTML = "";
        }

        connection.on("WaitingForOpponent", (gameData) => {
            game = gameData;
            const playerSetup = document.getElementById("playerSetup");
            const waitingMessage = document.getElementById("waitingMessage");
            const cardSelection = document.getElementById("cardSelection");

            if (playerSetup) playerSetup.style.display = "none";
            if (waitingMessage) waitingMessage.style.display = "block";
            if (cardSelection) cardSelection.style.display = "none";

            if (isHost) {
                document.getElementById("hostControls").style.display = "block";
                renderPlayerList();
            } else {
                document.getElementById("waitingForHost").style.display = "block";
            }
        });

        connection.on("GameStarted", (gameData) => {
            game = gameData;
            const playerSetup = document.getElementById("playerSetup");
            const waitingMessage = document.getElementById("waitingMessage");
            const gameInfo = document.getElementById("gameInfo");

            if (playerSetup) playerSetup.style.display = "none";
            if (waitingMessage) waitingMessage.style.display = "none";
            if (gameInfo) {
                gameInfo.style.display = "block";
                renderGame();
            } else {
                console.error("Element gameInfo not found");
            }
        });

        connection.on("GameUpdated", (gameData) => {
            game = gameData;
            renderGame();
            renderTimer();
        });

        connection.on("CardFlipped", (gameData) => {
            game = gameData;
            renderGame();
        });

        connection.on("NotYourTurn", () => {
            showModal("To nie twój ruch!");
        });

        connection.on("GameOver", (gameData) => {
            game = gameData;
            renderGame();
            const winner = game.players.reduce((prev, current) => (prev.score > current.score) ? prev : current);
           showModal(`Koniec gry! Zwycięzca: ${winner.name}, punkty: ${winner.score}.`);
            clearInterval(turnInterval);
        });

        connection.on("PlayerDisconnected", (playerName, gameData) => {
            showModal(`${playerName} rozłączył się.`);
            game = gameData;
            renderGame();
            clearInterval(turnInterval);
        });

        connection.on("TurnChanged", (gameData) => {
            game = gameData;
            renderGame();
            renderTimer();
        });

        connection.on("TurnTimerStarted", (timeForTurn) => {
            console.log(`Otrzymano TurnTimerStarted z czasem ${timeForTurn} sekund.`);

            const turnTimer = document.getElementById("turnTimer");
            const progressBar = document.getElementById("progressBar");
            let timeLeft = timeForTurn;
            turnTimer.textContent = `Pozostały czas: ${timeLeft}s`;
            progressBar.style.width = "100%";

            clearInterval(turnInterval);
            turnInterval = setInterval(() => {
                timeLeft--;
                if (timeLeft <= 0) {
                    clearInterval(turnInterval);
                    turnTimer.textContent = "Czas minął!";
                    progressBar.style.width = "0%";
                } else {
                    turnTimer.textContent = `Pozostały czas: ${timeLeft}s`;
                    progressBar.style.width = `${(timeLeft / timeForTurn) * 100}%`;
                    if (timeLeft <= 5) {
                        turnTimer.style.color = "#ff0000";
                        progressBar.style.background = "#ff0000";
                    } else {
                        turnTimer.style.color = "#d9534f";
                        progressBar.style.background = "#d9534f";
                    }
                }
            }, 1000);
        });

        function updateDifficultySettings() {
            const difficulty = document.querySelector('input[name="difficulty"]:checked').value;
            const timeForTurnInput = document.getElementById("timeForTurn");
            const suggestedCardsDiv = document.getElementById("suggestedCards");

            if (difficulty === "easy") {
                timeForTurnInput.value = 30;
                suggestedCardsDiv.textContent = "Sugerowana liczba kart: do 5";
            } else if (difficulty === "medium") {
                timeForTurnInput.value = 15;
                suggestedCardsDiv.textContent = "Sugerowana liczba kart: 5-10";
            } else if (difficulty === "hard") {
                timeForTurnInput.value = 5;
                suggestedCardsDiv.textContent = "Sugerowana liczba kart: 10+";
            }

            console.log(`Wybrano poziom trudności: ${difficulty}`);
        }

        document.querySelectorAll('input[name="difficulty"]').forEach(radio => {
            radio.addEventListener("change", updateDifficultySettings);
        });

        document.addEventListener("DOMContentLoaded", () => {
            updateDifficultySettings();
        });

        function renderPlayerList() {
            const playerListDiv = document.getElementById("playerList");
            if (!game || !game.players) {
                playerListDiv.innerHTML = "<p>Brak graczy.</p>";
                return;
            }

            let html = "<p>Połączeni gracze:</p><ul>";
            game.players.forEach(player => {
                html += `<li>Name: ${player.name} (ID: ${player.connectionId})</li>`;
            });
            html += "</ul>";

            playerListDiv.innerHTML = html;
        }

        function updateCurrentPlayerUI(game) {
            const currentPlayer = game.players.find(p => p.connectionId === game.currentPlayerId);
            const turnInfo = document.getElementById("turnInfo");
            turnInfo.textContent = `Obecny ruch: ${currentPlayer.name}`;

            const skipTurnButton = document.getElementById("skipTurnButton");
            if (currentPlayer.connectionId === myConnectionId) {
                skipTurnButton.style.display = "inline-block";
            } else {
                skipTurnButton.style.display = "none";
            }
        }

        function renderTimer() {
            const turnTimer = document.getElementById("turnTimer");

            if (!turnInterval) {
                turnTimer.textContent = "";
            }
        }

        function renderGame() {
            const gameBoard = document.getElementById("gameBoard");
            gameBoard.classList.add("game-board");
            gameBoard.innerHTML = "";
            document.getElementById("moves").textContent = `Ruchy: ${game.moves}`;

            const playersDiv = document.getElementById("players");
            playersDiv.innerHTML = "";

            const colors = ["blue", "orange", "green", "purple", "red"];

            game.players.forEach((player, index) => {
                const playerElement = document.createElement("div");
                playerElement.className = "player";
                playerElement.style.border = `1px solid ${colors[index % colors.length]}`;
                playerElement.style.padding = "0.5rem 1rem";
                playerElement.style.margin = "0.5rem 0";

                playerElement.innerHTML = `
                    <div class="player-label">Gracz ${index + 1}</div>
                    <div style="display: flex; justify-content: space-between; font-size: 1.5rem; font-weight: 600">
                        <div class="player-name">${player.name}</div>
                        <div style="color: ${colors[index % colors.length]}" class="player-score">${player.score}</div>
                    </div>
                `;

                playersDiv.appendChild(playerElement);
            });

             const currentPlayer = game.players.find(p => p.connectionId === game.currentPlayerId);
             const turnInfo = document.getElementById("turnInfo");
             turnInfo.textContent = `Aktualna tura: ${currentPlayer.name}`;

             //const gameBoardRect = gameBoard.getBoundingClientRect();
            // const gameBoardWidth = gameBoardRect.width;
             //const gameBoardHeight = gameBoardRect.height;
             //const totalCards = game.cards.length;

            //const aspectRatio = gameBoardWidth / gameBoardHeight;
            // const sqrtCards = Math.sqrt(totalCards);
             //let cols = Math.round(sqrtCards * Math.sqrt(aspectRatio));
            // let rows = Math.ceil(totalCards / cols);

             //while (cols * rows < totalCards) {
               //  cols++;
               //  rows = Math.ceil(totalCards / cols);
          //   }

             //const gap = 5;
             //const totalGapWidth = (cols - 1) * gap;
             //const totalGapHeight = (rows - 1) * gap;
             //const cardWidth = (gameBoardWidth - totalGapWidth) / cols;
             //const cardHeight = (gameBoardHeight - totalGapHeight) / rows;
             //const cardSize = Math.min(cardWidth, cardHeight);

             //gameBoard.style.gridTemplateColumns = `repeat(${cols}, ${cardSize}px)`;
             //gameBoard.style.gridTemplateRows = `repeat(${rows}, ${cardSize}px)`;

            updateCurrentPlayerUI(game);


            game.cards.forEach(card => {
            const cardElement = document.createElement("div");
            cardElement.className = "card" + (card.isMatched ? " matched" : "");

            // cardElement.style.width = `${cardSize}px`;
            // cardElement.style.height = `${cardSize}px`;

            if (card.isFlipped || card.isMatched) {
                const img = document.createElement("img");
                img.src = card.imagePath;
                img.style.height = "100%";
                img.style.borderRadius = "1rem";
                 img.style.width = "100%";
                cardElement.appendChild(img);
            } else {
                cardElement.innerHTML = "?";
            }

            cardElement.onclick = () => {
                if (!card.isFlipped && !card.isMatched) {
                    connection.invoke("FlipCard", game.gameId, card.id);
                }
            };

            gameBoard.appendChild(cardElement);
        });

        }

        document.getElementById("backToSetsButton").addEventListener("click", () => {
            selectedSet = null;
            selectedCards = [];
            resetInterface();
        });

        window.addEventListener("resize", () => {
            if (game) {
                renderGame();
            }
        });

        function showModal(message) {
            const overlay = document.getElementById("modalOverlay");
            document.getElementById("modalMessage").textContent = message;
            overlay.classList.remove("hidden");
        }

        document.getElementById("modalClose").addEventListener("click", () => {
          document.getElementById("modalOverlay").classList.add("hidden");
        });
            //}

    </script>
    }

<style>
    html, body {
        margin: 0;
        padding: 0;
        min-height: 100vh;
        width: 100vw;
       overflow-x: scroll;
        list-style-type: none;
    }

  

    legend {
        background-color: #000;
        color: white;
        padding: 3px 6px;
        text-transform: uppercase;
        letter-spacing: 2px;
    }

    .main-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        width: 100vw;
        box-sizing: border-box;
        padding: 10px;
    }

    .setup-container {
        text-align: center;
        padding: 20px;
    }

    #gameInfo {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 10px;
        overflow: hidden;
    }

    #players {
        display: flex;
        gap: 10px;
        padding: 10px;
        background: #f8f8f8;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .player {
        padding: 10px;
        border-radius: 5px;
    }

    .player-label {
        font-size: 1.2rem;
        font-weight: bold;
    }

    #waitingMessage {
        text-align: center;
        padding: 20px;
    }

    .card-set {
        border: 1px solid #ccc;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f9f9f9;
    }

        .card-set:hover {
            background: #f0f0f0;
        }

    .setup-container h2 {
        margin-top: 2rem;
    }

    .setup-container .createNewSetButton {
        background: #c0392b;
        color: white;
        padding: 10px 20px;
        letter-spacing: 1px;
        border: none;
    }

    .button {
        background: #4287f5;
        color: white;
        padding: 10px 20px;
        letter-spacing: 1px;
        border: none;
    }

    .joinButton {
        background: #4287f5;
        color: white;
        padding: 10px 20px;
        letter-spacing: 1px;
        border: none;
    }

    .turnInfo {
        font-size: 18px; 
        font-weight: 500;
    }

    #cardSetSelection {
        margin: 2rem 0 0 0;
    }

    #playerList {
        margin: 10px 0;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 1rem;
        background-color: #d4edda; 
        box-shadow: 3px 3px 8px rgba(0, 0, 0, 0.2);
    }

        #playerList ul {
            list-style-type: none;
            padding: 0;
        }

        #playerList li {
            margin: 5px 0;
        }

    .difficulty-levels {
        margin: 10px 0;
    }

        .difficulty-levels label {
            margin-right: 15px;
            font-weight: bold;
        }

        .difficulty-levels input[type="radio"] {
            margin-right: 5px;
        }

    #suggestedCards {
        color: #555;
        font-style: italic;
    }

    .cards-wrapper {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row;
        gap: 10px;
        justify-content: center;
        padding: 1rem 0;

    }

    .card-preview {
        width: 100px;
        height: 100px;
        border: 2px solid #007bff;
        border-radius: 8px;
        overflow: hidden;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #fff;
        transition: background-color 0.2s, transform 0.2s;
    }

        .card-preview:hover {
            transform: scale(1.05);
        }
        .card-preview.selected {
            background: green;
        }

        .card-preview img {
            max-width: 90%;
            max-height: 90%;
            object-fit: cover;
        }

    .actions {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 1rem;
    }

    .button {
        padding: 0.5rem 1rem;
        border: none;
        color: #fff;
        border-radius: 4px;
        cursor: pointer;
    }

        .button.select-all {
            background: #28a745;
        }

        .button.start {
            background: #007bff;
        }

        .button.back {
            background: #dc3545;
        }



    .selectAllCards {
        background: green;
    }

    .startWithSelectedCardsButton {
    background: blue;}



    .backToSetsButton {
        background: red;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .modal-window {
        background: white;
        padding: 1.5rem 2rem;
        border-radius: 0.5rem;
        max-width: 90%;
        width: 300px;
        padding: 1rem 2rem;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }

    .hidden {
        display: none !important;
    }

    .modal-window p {
        margin-bottom: 1rem;
        font-size: 1.1rem;
    }



</style>